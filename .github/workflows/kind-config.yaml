name: Kubernetes Integration Tests

on:
  pull_request:
    branches: [ main ]

jobs:
  k8s-integration-test:
    name: Run Kubernetes Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
      
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
      
      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      
      - name: Create multi-node KinD cluster
        run: |
          cat > kind-config.yaml <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
          - role: worker
          - role: worker
          EOF
          
          kind create cluster --config kind-config.yaml --name pr-test-cluster
          kubectl get nodes
      
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          
          echo "Waiting for ingress controller pods to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=90s
      
      - name: Deploy sample application
        run: |
          # Create a simple application to test
          kubectl create deployment web --image=nginx
          kubectl create service clusterip web --tcp=80:80
          kubectl scale deployment web --replicas=3
          
          # Label the service
          kubectl label service web app=web
          
          # Create ingress resource
          cat > ingress.yaml <<EOF
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: web-ingress
            annotations:
              nginx.ingress.kubernetes.io/rewrite-target: /
          spec:
            rules:
            - http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: web
                      port:
                        number: 80
          EOF
          
          kubectl apply -f ingress.yaml
          
          # Wait for pods to be ready
          kubectl wait --for=condition=available --timeout=60s deployment/web
      
      - name: Generate randomized traffic and collect metrics
        run: |
          # Install hey load testing tool
          curl -sf https://gobinaries.com/rakyll/hey | sh
          
          # Create results directory
          mkdir -p test-results
          
          # Save cluster resource usage before test
          kubectl top nodes > test-results/pre-test-node-metrics.txt || echo "kubectl top not available yet"
          kubectl top pods -A > test-results/pre-test-pod-metrics.txt || echo "kubectl top not available yet"
          
          # Run hey with detailed output saved
          echo "Generating random HTTP traffic to test ingress..."
          hey -n 1000 -c 20 -z 60s -o csv http://localhost/ > test-results/load-test-results.csv
          
          # Create a summary report
          hey -n 500 -c 10 -z 30s http://localhost/ > test-results/load-test-summary.txt
          
          # Get metrics after the load test
          kubectl top nodes > test-results/post-test-node-metrics.txt || echo "kubectl top not available yet"
          kubectl top pods -A > test-results/post-test-pod-metrics.txt || echo "kubectl top not available yet"
          
          # Get logs from the ingress controller
          kubectl logs -n ingress-nginx -l app.kubernetes.io/component=controller --tail=50 > test-results/ingress-logs.txt
          
          # Get pod status
          kubectl get pods -A -o wide > test-results/pod-status.txt
          
          # Print summary of the load test
          echo "=== Load Test Results Summary ==="
          cat test-results/load-test-summary.txt
          echo "============================="
          
          # Print pod resource usage
          echo "=== Pod Resource Usage ==="
          cat test-results/post-test-pod-metrics.txt
          echo "============================="
      
      - name: Generate performance report
        run: |
          # Create a simple HTML report from the CSV data
          cat > test-results/report.html <<EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Load Test Performance Report</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; }
              table { border-collapse: collapse; width: 100%; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; }
              tr:nth-child(even) { background-color: #f9f9f9; }
            </style>
          </head>
          <body>
            <h1>Load Test Performance Report</h1>
            <h2>Summary</h2>
            <pre>$(cat test-results/load-test-summary.txt)</pre>
            
            <h2>Pod Resource Usage</h2>
            <pre>$(cat test-results/post-test-pod-metrics.txt)</pre>
            
            <h2>Node Resource Usage</h2>
            <pre>$(cat test-results/post-test-node-metrics.txt)</pre>
            
            <h2>Ingress Controller Logs (Sample)</h2>
            <pre>$(head -n 20 test-results/ingress-logs.txt)</pre>
          </body>
          </html>
          EOF
          
          echo "Performance report generated at test-results/report.html"
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: test-results/
          retention-days: 14
      
      - name: Clean up
        if: always()
        run: |
          kind delete cluster --name pr-test-cluster